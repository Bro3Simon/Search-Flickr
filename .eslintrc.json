{
  // Add a plugin to the extends array to apply its rules without changing them.
  "extends": [
    // A later item in the array overrides a previous one
    "eslint:recommended",
    "plugin:jsx-a11y/recommended",
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime", // Must come after react/recommended so that it overwrites it.
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"]
  },
  // Add a plugin to this array to have have access to its rules and manually set them.
  // A plugin can be used in both extends and plugins or one and not the other.
  "plugins": ["@typescript-eslint", "import", "react"],
  "root": true,
  "rules": {
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "format": ["strictCamelCase"],
        "leadingUnderscore": "allow",
        "selector": "parameter"
      },
      {
        "format": ["StrictPascalCase"],
        "selector": "typeLike"
      },
      {
        "format": ["strictCamelCase", "UPPER_CASE"],
        "selector": "variable"
      },
      {
        "format": ["StrictPascalCase"],
        "prefix": ["is", "are", "has", "have", "can", "should"],
        "selector": "variable",
        "types": ["boolean"]
      }
    ],
    "curly": ["error", "multi-line"],
    "func-style": ["error", "declaration"],
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc"
        },
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "object",
          "type"
        ],
        "newlines-between": "always",
        "pathGroups": [
          {
            "group": "external",
            "pattern": "react",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react"]
      }
    ],
    "max-len": [
      "error",
      {
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true
      }
    ],
    "no-console": "error",
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "next": "*",
        "prev": ["block-like", "for", "function", "if"]
      },
      {
        "blankLine": "always",
        "next": "return",
        "prev": "*"
      },
      {
        "blankLine": "always",
        "next": "*",
        "prev": ["const", "let"]
      },
      {
        "blankLine": "any",
        "next": ["const", "let"],
        "prev": ["const", "let"]
      }
    ],
    "react/boolean-prop-naming": [
      "error",
      {
        "rule": "^(is|are|has|have|can|should)[A-Z]([A-Za-z0-9]?)+",
        "validateNested": true
      }
    ],
    "react/button-has-type": "error",
    "react/destructuring-assignment": ["error", "always"],
    // react/function-component-definition is also enforced more generally with func-style
    "react/function-component-definition": "error",
    "react/jsx-fragments": "error",
    "react/jsx-handler-names": [
      "error",
      {
        "checkInlineFunction": true,
        "checkLocalVariables": true
      }
    ],
    "react/jsx-newline": "error",
    "react/jsx-no-leaked-render": [
      "error",
      {
        "validStrategies": ["ternary"]
      }
    ],
    "react/jsx-no-useless-fragment": "error",
    "react/jsx-sort-props": [
      "error",
      {
        "ignoreCase": true
      }
    ],
    "react/no-array-index-key": "error",
    "react/no-unstable-nested-components": "error",
    "react/no-unused-prop-types": "error",
    "react/require-default-props": [
      "error",
      { "functions": "defaultArguments" }
    ],
    "sort-imports": [
      // This works in cooperation with import/order
      // https://stackoverflow.com/questions/72749762/eslint-how-to-sort-import-members-with-eslint-plugin-import
      "error",
      {
        "ignoreDeclarationSort": true
      }
    ],
    "sort-keys": [
      "error",
      "asc",
      {
        "natural": true
      }
    ],
    "spaced-comment": "error"
  }
}
